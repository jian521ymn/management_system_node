const fs = require('fs'),
    path = require('path'),
	dirname = path.resolve(),
    exec = require('child_process').exec;

/**
 * promise版child_process.exce
 * @params {cmdStr："npm run start" || []} // 需要执行的指令,为数组时会依次遍历
 */
const execPromise = (cmdStrOrArr) => {
    const promise = (cmdStr, nextCmdStr) => {
       return new Promise((resolve, reject) => {
            exec(cmdStr, (err, stdout, stderr) => {
                if (err) {
                    resolve({err});
                    return;
                }
                resolve({ stdout,stderr})
            })
        }).catch(err => {
            return {err}
        })
    }
    if (Array.isArray(cmdStrOrArr) && cmdStrOrArr.length > 1) {
        let prev = 0
        async function promiseThen(index) {
            console.log(cmdStrOrArr[index],'cmd');
            if(index === cmdStrOrArr.length-1){
                return promise(cmdStrOrArr[index])
            }
            const data = await promise(cmdStrOrArr[index]);
            if (!data?.err) {
                prev++
                promiseThen(prev)
            }
        }
        return promiseThen(0)
    }
    return promise(Array.isArray(cmdStrOrArr) ? cmdStrOrArr[0] : cmdStrOrArr)
}

//=>MKDIR && RMDIR && READ-DIR && READ-FILE && COPY-FILE
['mkdir', 'rmdir', 'readdir', 'readFile', 'copyFile', 'unlink'].forEach(item => {
	exports[item] = function (pathname, copypath = '') {
		pathname = path.resolve(dirname, pathname);
		copypath = path.resolve(dirname, copypath);
		return new Promise((resolve, reject) => {
			let arg = [(err, result) => {
				if (err) {
					reject(err);
					return;
				}
				resolve(result || '');
			}];
			if (item === 'readFile') {
				!/(JPG|JPEG|PNG|GIF|SVG|ICO|BMP|EOT|TTF|WOFF|MP3|MP4|OGG|WAV|M4A|WMV|AVI)$/i.test(pathname) ? arg.unshift('utf8') : null;
			}
			item === 'copyFile' ? arg.unshift(copypath) : null;
			fs[item](pathname, ...arg);
		});
	};
});

//=>WRITE && APPEND
['writeFile', 'appendFile'].forEach(item => {
	exports[item] = function (pathname, content) {
		pathname = path.resolve(dirname, pathname);
		if (typeof content !== 'string') {
			content = JSON.stringify(content);
		}
		return new Promise((resolve, reject) => {
			fs[item](pathname, content, 'utf8', (err, result) => {
				if (err) {
					reject(err);
					return;
				}
				resolve(result || '');
			});
		});
	};
});

/**
 * 处理page
 * @params {page_num,page_size}
 */
 const page = ({
     page_num=1,
     page_size=10
}) => {
    return `${page_size*(page_num-1)},${page_size*page_num}`
}
/**
 * 接口通用返回格式
 * @params {flag,options}
 */
const success = (flag = true, options = {}) =>{
	let defaults = {
		code: flag ? 0 : 1,
		msg: flag ? 'OK' : 'NO',
        data:null
	};
	return Object.assign(defaults, options);
}

module.exports = {
    ...exports,
    execPromise,
    page,
    success
}